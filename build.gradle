plugins {
    id "io.github.gradle-nexus.publish-plugin"
    id "com.github.kt3k.coveralls"
    id "io.snyk.gradle.plugin.snykplugin"
    id "org.sonarqube"
    id "com.github.ben-manes.versions"
    id "net.ltgt.errorprone" apply false
    id "net.ltgt.nullaway" apply false
}

apply from: "${rootDir}/gradle/reporting.gradle"
apply from: "${rootDir}/gradle/coveralls.gradle"
apply from: "${rootDir}/gradle/snyk.gradle"
apply from: "${rootDir}/gradle/sonarqube.gradle"
apply from: "${rootDir}/gradle/dependency-updates.gradle"

allprojects {
    apply from: "${rootDir}/gradle/dependency-versions.gradle"
    apply from: "${rootDir}/gradle/eclipse.gradle"

    group = "io.github.joeljeremy7.externalizedproperties"

    def snapshotSuffix = rootProject.hasProperty("release") ? "" : "-SNAPSHOT"
    version = "1.0.0-alpha.6" + snapshotSuffix

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

def javaProjects = subprojects.findAll { new File(it.projectDir, "src").exists() }

configure(javaProjects) {
    apply plugin: "java-library"
    apply plugin: "java-test-fixtures"

    apply from: "${rootDir}/gradle/publications.gradle"
    apply from: "${rootDir}/gradle/code-quality.gradle"
    apply from: "${rootDir}/gradle/multi-jvm-tests.gradle"

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter:${versions.junitJupiter}"
    }

    testing {
        suites { 
            test { 
                useJUnitJupiter()
            }
            integrationTest(JvmTestSuite) {
                testType = TestSuiteType.INTEGRATION_TEST
                targets {
                    all {
                        testTask.configure {
                            shouldRunAfter test
                        }
                    }
                }
            }
        }
    }

    compileJava {
        options.release.set(11)
        options.javaModuleVersion.set(project.version)
    }

    java {
        archivesBaseName = rootProject.relativeProjectPath(project.path).replace(":", "-")

        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    javadoc {
        configure(options) {
            tags(
                "apiNote:a:API Note:",
                "implSpec:a:Implementation Requirements:",
                "implNote:a:Implementation Note:"
            )
        }
    }
}

if (project.hasProperty("ossrh")) {
    nexusPublishing {
        repositories {
            sonatype {
                nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
                snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
                username = System.getenv("OSSRH_USERNAME") ?: property("ossrhUsername")
                password = System.getenv("OSSRH_PASSWORD") ?: property("ossrhPassword")
            }
        }
    }
}
