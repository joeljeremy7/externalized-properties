// Exclude module-info.java when compiling through Eclipse.
// Background: Eclipse does not have good support for JPMS.
// This workaround is introduced in Caffeine library:
// https://github.com/ben-manes/caffeine/issues/535
// https://github.com/ben-manes/caffeine/pull/540

import org.gradle.plugins.ide.eclipse.model.SourceFolder

apply plugin: 'eclipse'

// Exclude module-info when compiling through Eclipse
afterEvaluate {
    eclipse.classpath.file.whenMerged {
        def main = entries.find { it instanceof SourceFolder && it.path == 'src/main/java' }
        if (main != null) {
            main.excludes.add('module-info.java')
        }
    }
}

// For the Gradle Eclipse plugin
eclipse.project.file.withXml { provider ->
    ignoreDerivedResources(provider.asNode())
}

def ignoreDerivedResources(projectDescription, directories = [
        'test-output', 'build/classes', 'build/reports', 'build/jacoco', 'build/tmp']) {
    def count = directories.count { file(it).exists() }
    if (count > 0) {
        def filter = projectDescription
            .appendNode('filteredResources')
            .appendNode('filter')
        filter.appendNode('id', System.currentTimeMillis().toString().trim())
        filter.appendNode('type', '26')
        filter.appendNode('name')
        def matcher = filter.appendNode('matcher')
        matcher.appendNode('id', 'org.eclipse.ui.ide.orFilterMatcher')
        def arguments = matcher.appendNode('arguments')
        directories.each {
            if (file(it).exists()) {
                def dirMatcher = arguments.appendNode('matcher')
                dirMatcher.appendNode('id', 'org.eclipse.ui.ide.multiFilter')
                dirMatcher.appendNode('arguments', "1.0-projectRelativePath-matches-false-false-${it}")
            }
        }
    }
}